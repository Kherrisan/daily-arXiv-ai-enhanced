{"id": "2509.03711", "categories": ["cs.CR", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03711", "abs": "https://arxiv.org/abs/2509.03711", "authors": ["Siddharth Muralee", "Sourag Cherupattamoolayil", "James C. Davis", "Antonio Bianchi", "Aravind Machiry"], "title": "Reactive Bottom-Up Testing", "comment": null, "summary": "Modern computing systems remain rife with software vulnerabilities. Engineers\napply many means to detect them, of which dynamic testing is one of the most\ncommon and effective. However, most dynamic testing techniques follow a\ntop-down paradigm, and struggle to reach and exercise functions deep within the\ncall graph. While recent works have proposed Bottom-Up approaches to address\nthese limitations, they face challenges with false positives and generating\nvalid inputs that adhere to the context of the entire program.\n  In this work, we introduce a new paradigm that we call Reactive Bottom-Up\nTesting. Our insight is that function-level testing is necessary but not\nsufficient for the validation of vulnerabilities in functions. What we need is\na systematic approach that not only tests functions in isolation but also\nvalidates their behavior within the broader program context, ensuring that\ndetected vulnerabilities are both reachable and triggerable. We develop a\nthree-stage bottom-up testing scheme: (1) identify likely-vulnerable functions\nand generate type- and context-aware harnesses; (2) fuzz to find crashes and\nextract input constraints via symbolic execution; (3) verify crashes by\ncombining constraints to remove false positives. We implemented an automated\nprototype, which we call Griller. We evaluated Griller in a controlled setting\nusing a benchmark of 48 known vulnerabilities across 5 open-source projects,\nwhere we successfully detected 28 known vulnerabilities. Additionally, we\nevaluated Griller on several real-world applications such as Pacman, and it\ndiscovered 6 previously unknown vulnerabilities. Our findings suggest that\nReactive Bottom-Up Testing can significantly enhance the detection of\nvulnerabilities in complex systems, paving the way for more robust security\npractices."}
{"id": "2509.03744", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03744", "abs": "https://arxiv.org/abs/2509.03744", "authors": ["Hamid Barati"], "title": "A Quantum Genetic Algorithm-Enhanced Self-Supervised Intrusion Detection System for Wireless Sensor Networks in the Internet of Things", "comment": null, "summary": "The rapid expansion of the Internet of Things (IoT) and Wireless Sensor\nNetworks (WSNs) has significantly increased the attack surface of such systems,\nmaking them vulnerable to a wide range of cyber threats. Traditional Intrusion\nDetection Systems (IDS) often fail to meet the stringent requirements of\nresource-constrained IoT environments due to their high computational cost and\nreliance on large labeled datasets. To address these challenges, this paper\nproposes a novel hybrid Intrusion Detection System that integrates a Quantum\nGenetic Algorithm (QGA) with Self-Supervised Learning (SSL). The QGA leverages\nquantum-inspired evolutionary operators to optimize feature selection and\nfine-tune model parameters, ensuring lightweight yet efficient detection in\nresource-limited networks. Meanwhile, SSL enables the system to learn robust\nrepresentations from unlabeled data, thereby reducing dependency on manually\nlabeled training sets. The proposed framework is evaluated on benchmark IoT\nintrusion datasets, demonstrating superior performance in terms of detection\naccuracy, false positive rate, and computational efficiency compared to\nconventional evolutionary and deep learning-based IDS models. The results\nhighlight the potential of combining quantum-inspired optimization with\nself-supervised paradigms to design next-generation intrusion detection\nsolutions for IoT and WSN environments."}
{"id": "2509.03806", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03806", "abs": "https://arxiv.org/abs/2509.03806", "authors": ["Hao Nie", "Wei Wang", "Peng Xu", "Wei Chen", "Laurence T. Yang", "Mauro Conti", "Kaitai Liang"], "title": "Peekaboo, I See Your Queries: Passive Attacks Against DSSE Via Intermittent Observations", "comment": null, "summary": "Dynamic Searchable Symmetric Encryption (DSSE) allows secure searches over a\ndynamic encrypted database but suffers from inherent information leakage.\nExisting passive attacks against DSSE rely on persistent leakage monitoring to\ninfer leakage patterns, whereas this work targets intermittent observation - a\nmore practical threat model. We propose Peekaboo - a new universal attack\nframework - and the core design relies on inferring the search pattern and\nfurther combining it with auxiliary knowledge and other leakage. We instantiate\nPeekaboo over the SOTA attacks, Sap (USENIX' 21) and Jigsaw (USENIX' 24), to\nderive their \"+\" variants (Sap+ and Jigsaw+). Extensive experiments demonstrate\nthat our design achieves >0.9 adjusted rand index for search pattern recovery\nand 90% query accuracy vs. FMA's 30% (CCS' 23). Peekaboo's accuracy scales with\nobservation rounds and the number of observed queries but also it resists SOTA\ncountermeasures, with >40% accuracy against file size padding and >80% against\nobfuscation."}
{"id": "2509.03807", "categories": ["cs.CR", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03807", "abs": "https://arxiv.org/abs/2509.03807", "authors": ["Junhui Li", "Chengbin Feng", "Zhiwei Yang", "Qi Mo", "Wei Wang"], "title": "BIDO: A Unified Approach to Address Obfuscation and Concept Drift Challenges in Image-based Malware Detection", "comment": null, "summary": "To identify malicious Android applications, various malware detection\ntechniques have been proposed. Among them, image-based approaches are\nconsidered potential alternatives due to their efficiency and scalability.\nRecent studies have reported that these approaches suffer significant\nperformance declines when confronted with obfuscation or concept drift.\nHowever, existing solutions often treat these two challenges as different\nproblems, offering independent solutions. These techniques overlook the fact\nthat both challenges share a common statistical root, out-of-distribution, and\nresearch from this perspective remains limited. In response, we propose BIDO, a\nhybrid image-based malware detector designed to enhance robustness against both\nobfuscation and concept drift simultaneously. Specifically, to improve the\ndiscriminative power of image features, we introduce a local feature selection\nmodule that identifies informative subregions within malware images. Second, to\nenhance feature robustness, we model pairwise cross-modal dependencies in an\nouter product space, enabling the extraction of stable co-occurrence patterns.\nThird, to ensure feature compactness, we design a learnable metric that pulls\nsamples with identical labels closer while pushing apart those with different\nlabels, regardless of obfuscation or concept drift. Extensive experiments on\nthe real-world datasets demonstrate that BIDO significantly outperforms\nexisting baselines, achieving higher robustness against both concept drift and\nobfuscation. The source code is available at:\nhttps://github.com/whatishope/BIDO/."}
{"id": "2509.03541", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03541", "abs": "https://arxiv.org/abs/2509.03541", "authors": ["Chong Wang", "Haoning Wu", "Peng Liang", "Maya Daneva", "Marten van Sinderen"], "title": "Towards the Datasets Used in Requirements Engineering of Mobile Apps: Preliminary Findings from a Systematic Mapping Study", "comment": null, "summary": "[Background] Research on requirements engineering (RE) for mobile apps\nemploys datasets formed by app users, developers or vendors. However, little is\nknown about the sources of these datasets in terms of platforms and the RE\nactivities that were researched with the help of the respective datasets.\n[Aims] The goal of this paper is to investigate the state-of-the-art of the\ndatasets of mobile apps used in existing RE research. [Method] We carried out a\nsystematic mapping study by following the guidelines of Kitchenham et al.\n[Results] Based on 43 selected papers, we found that Google Play and Apple App\nStore provide the datasets for more than 90% of published research in RE for\nmobile apps. We also found that the most investigated RE activities - based on\ndatasets, are requirements elicitation and requirements analysis. [Conclusions]\nOur most important conclusions are: (1) there is a growth in the use of\ndatasets for RE research of mobile apps since 2012, (2) the RE knowledge for\nmobile apps might be skewed due to the overuse of Google Play and Apple App\nStore, (3) there are attempts to supplement reviews of apps from repositories\nwith other data sources, (4) there is a need to expand the alternative sources\nand experiments with complimentary use of multiple sources, if the community\nwants more generalizable results. Plus, it is expected to expand the research\non other RE activities, beyond elicitation and analysis."}
{"id": "2509.03821", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03821", "abs": "https://arxiv.org/abs/2509.03821", "authors": ["Rui Zhao", "Muhammad Shoaib", "Viet Tung Hoang", "Wajih Ul Hassan"], "title": "Rethinking Tamper-Evident Logging: A High-Performance, Co-Designed Auditing System", "comment": "This paper has been accepted to the ACM Conference on Computer and\n  Communications Security (CCS) 2025", "summary": "Existing tamper-evident logging systems suffer from high overhead and severe\ndata loss in high-load settings, yet only provide coarse-grained tamper\ndetection. Moreover, installing such systems requires recompiling kernel code.\nTo address these challenges, we present Nitro, a high-performance,\ntamper-evident audit logging system that supports fine-grained detection of log\ntampering. Even better, our system avoids kernel recompilation by using the\neBPF technology. To formally justify the security of Nitro, we provide a new\ndefinitional framework for logging systems, and give a practical cryptographic\nconstruction meeting this new goal. Unlike prior work that focus only on the\ncryptographic processing, we codesign the cryptographic part with the pre- and\npost-processing of the logs to exploit all system-level optimizations. Our\nevaluations demonstrate Nitro's superior performance, achieving 10X-25X\nimprovements in high-stress conditions and 2X-10X in real-world scenarios while\nmaintaining near-zero data loss. We also provide an advanced variant, Nitro-R\nthat introduces in-kernel log reduction techniques to reduce runtime overhead\neven further."}
{"id": "2509.03554", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03554", "abs": "https://arxiv.org/abs/2509.03554", "authors": ["Cheng-Yang Tsai", "Tzu-Wei Huang", "Jen-Wei Shih", "I-Hsiang Wang", "Yu-Cheng Lin", "Rung-Bin Lin"], "title": "A Multi-stage Error Diagnosis for APB Transaction", "comment": null, "summary": "Functional verification and debugging are critical bottlenecks in modern\nSystem-on-Chip (SoC) design, with manual detection of Advanced Peripheral Bus\n(APB) transaction errors in large Value Change Dump (VCD) files being\ninefficient and error-prone. Addressing the 2025 ICCAD Contest Problem D, this\nstudy proposes an automated error diagnosis framework using a hierarchical\nRandom Forest-based architecture. The multi-stage error diagnosis employs four\npre-trained binary classifiers to sequentially detect Out-of-Range Access,\nAddress Corruption, and Data Corruption errors, prioritizing high-certainty\naddress-related faults before tackling complex data errors to enhance\nefficiency. Experimental results show an overall accuracy of 91.36%, with\nnear-perfect precision and recall for address errors and robust performance for\ndata errors. Although the final results of the ICCAD 2025 CAD Contest are yet\nto be announced as of the submission date, our team achieved first place in the\nbeta stage, highlighting the method's competitive strength. This research\nvalidates the potential of hierarchical machine learning as a powerful\nautomated tool for hardware debugging in Electronic Design Automation (EDA)."}
{"id": "2509.03860", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03860", "abs": "https://arxiv.org/abs/2509.03860", "authors": ["Yifan Jia", "Ye Tian", "Liguo Zhang", "Yanbin Wang", "Jianguo Sun", "Liangliang Song"], "title": "KGBERT4Eth: A Feature-Complete Transformer Powered by Knowledge Graph for Multi-Task Ethereum Fraud Detection", "comment": "This work has been submitted to the IEEE for possible publication", "summary": "Ethereum's rapid ecosystem expansion and transaction anonymity have triggered\na surge in malicious activity. Detection mechanisms currently bifurcate into\nthree technical strands: expert-defined features, graph embeddings, and\nsequential transaction patterns, collectively spanning the complete feature\nsets of Ethereum's native data layer. Yet the absence of cross-paradigm\nintegration mechanisms forces practitioners to choose between sacrificing\nsequential context awareness, structured fund-flow patterns, or human-curated\nfeature insights in their solutions. To bridge this gap, we propose KGBERT4Eth,\na feature-complete pre-training encoder that synergistically combines two key\ncomponents: (1) a Transaction Semantic Extractor, where we train an enhanced\nTransaction Language Model (TLM) to learn contextual semantic representations\nfrom conceptualized transaction records, and (2) a Transaction Knowledge Graph\n(TKG) that incorporates expert-curated domain knowledge into graph node\nembeddings to capture fund flow patterns and human-curated feature insights. We\njointly optimize pre-training objectives for both components to fuse these\ncomplementary features, generating feature-complete embeddings. To emphasize\nrare anomalous transactions, we design a biased masking prediction task for TLM\nto focus on statistical outliers, while the Transaction TKG employs link\nprediction to learn latent transaction relationships and aggregate knowledge.\nFurthermore, we propose a mask-invariant attention coordination module to\nensure stable dynamic information exchange between TLM and TKG during\npre-training. KGBERT4Eth significantly outperforms state-of-the-art baselines\nin both phishing account detection and de-anonymization tasks, achieving\nabsolute F1-score improvements of 8-16% on three phishing detection benchmarks\nand 6-26% on four de-anonymization datasets."}
{"id": "2509.03668", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03668", "abs": "https://arxiv.org/abs/2509.03668", "authors": ["Matt Rau", "Chris Brown", "John Edwards"], "title": "Parse Tree Tracking Through Time for Programming Process Analysis at Scale", "comment": null, "summary": "Background and Context: Programming process data can be utilized to\nunderstand the processes students use to write computer programming\nassignments. Keystroke- and line-level event logs have been used in the past in\nvarious ways, primarily in high-level descriptive statistics (e.g., timings,\ncharacter deletion rate, etc). Analysis of behavior in context (e.g., how much\ntime students spend working on loops) has been cumbersome because of our\ninability to automatically track high-level code representations, such as\nabstract syntax trees, through time and unparseable states.\n  Objective: Our study has two goals. The first is to design the first\nalgorithm that tracks parse tree nodes through time. Second, we utilize this\nalgorithm to perform a partial replication study of prior work that used manual\ntracking of code representations, as well as other novel analyses of student\nprogramming behavior that can now be done at scale.\n  Method: We use two algorithms presented in this paper to track parse tree\nnodes through time and construct tree representations for unparseable code\nstates. We apply these algorithms to a public keystroke data from student\ncoursework in a 2021 CS1 course and conduct analysis on the resulting parse\ntrees.\n  Findings: We discover newly observable statistics at scale, including that\ncode is deleted at similar rates inside and outside of conditionals and loops,\na third of commented out code is eventually restored, and that frequency with\nwhich students jump around in their code may not be indicative of struggle.\n  Implications: The ability to track parse trees through time opens the door to\nunderstanding new dimensions of student programming, such as best practices of\nstructural development of code over time, quantitative measurement of what\nsyntactic constructs students struggle most with, refactoring behavior, and\nattention shifting within the code."}
{"id": "2509.03879", "categories": ["cs.CR", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2509.03879", "abs": "https://arxiv.org/abs/2509.03879", "authors": ["Gang Liu", "Ningjie Li", "Cen Chen"], "title": "ShieldMMU: Detecting and Defending against Controlled-Channel Attacks in Shielding Memory System", "comment": null, "summary": "Intel SGX and hypervisors isolate non-privileged programs from other\nsoftware, ensuring confidentiality and integrity. However, side-channel attacks\ncontinue to threaten Intel SGX's security, enabling malicious OS to manipulate\nPTE present bits, induce page faults, and steal memory access traces. Despite\nextensive research, existing defenses focus on detection or rely on impractical\nsolutions. This paper presents ShieldMMU, a comprehensive solution for\nmitigating controlled channel attacks, balancing compatibility, performance,\nand usability. Leveraging a Merkle Tree-inspired Defense Tree (DD-Tree),\nShieldMMU protects PTE integrity by detecting, locating, and restoring attacked\nPTEs. It identifies MMU page table lookup events and side-channel attacks,\npromptly restoring PTE parameters to prevent page fault traps and ensure secure\nnon-privileged application operation within SGX. Our experiments confirm\nShieldMMU's enhanced security and acceptable latency performance."}
{"id": "2509.03848", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2509.03848", "abs": "https://arxiv.org/abs/2509.03848", "authors": ["Rodrigo Oliveira Zacarias", "Rodrigo Pereira dos Santos", "Patricia Lago"], "title": "Towards an Understanding of Developer Experience-Driven Transparency in Software Ecosystems", "comment": "36 pages Submitted to the ACM Transactions on Software Engineering\n  and Methodology. 2025", "summary": "Software ecosystems (SECO) have become a dominant paradigm in the software\nindustry, enabling third-party developers to co-create value through\ncomplementary components and services. While Developer Experience (DX) is\nincreasingly recognized as critical for sustainable SECO, transparency remains\nan underexplored factor shaping how developers perceive and interact with\necosystems. Existing studies acknowledge transparency as essential for trust,\nfairness, and engagement, yet its relationship with DX has not been\nsystematically conceptualized. Hence, this work aims to advance the\nunderstanding of transparency in SECO from a developer-centered perspective. To\nthis end, we propose SECO-TransDX (Transparency in Software Ecosystems from a\nDeveloper Experience Perspective), a conceptual model that introduces the\nnotion of DX-driven transparency. The model identifies 63 interrelated\nconcepts, including conditioning factors, ecosystem procedures, artifacts, and\nrelational dynamics that influence how transparency is perceived and\nconstructed during developer interactions. SECO-TransDX was built upon prior\nresearch and refined through a Delphi study with experts from academia and\nindustry. It offers a structured lens to examine how transparency mediates DX\nacross technical, social, and organizational layers. For researchers, it lays\nthe groundwork for future studies and tool development; for practitioners, it\nsupports the design of trustworthy, developer-centered platforms that improve\ntransparency and foster long-term engagement in SECO."}
{"id": "2509.03939", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.03939", "abs": "https://arxiv.org/abs/2509.03939", "authors": ["Yifan Jia", "Yanbin Wang", "Jianguo Sun", "Ye Tian", "Peng Qian"], "title": "LMAE4Eth: Generalizable and Robust Ethereum Fraud Detection by Exploring Transaction Semantics and Masked Graph Embedding", "comment": "This work has been submitted to the IEEE for possible publication", "summary": "Current Ethereum fraud detection methods rely on context-independent,\nnumerical transaction sequences, failing to capture semantic of account\ntransactions. Furthermore, the pervasive homogeneity in Ethereum transaction\nrecords renders it challenging to learn discriminative account embeddings.\nMoreover, current self-supervised graph learning methods primarily learn node\nrepresentations through graph reconstruction, resulting in suboptimal\nperformance for node-level tasks like fraud account detection, while these\nmethods also encounter scalability challenges. To tackle these challenges, we\npropose LMAE4Eth, a multi-view learning framework that fuses transaction\nsemantics, masked graph embedding, and expert knowledge. We first propose a\ntransaction-token contrastive language model (TxCLM) that transforms\ncontext-independent numerical transaction records into logically cohesive\nlinguistic representations. To clearly characterize the semantic differences\nbetween accounts, we also use a token-aware contrastive learning pre-training\nobjective together with the masked transaction model pre-training objective,\nlearns high-expressive account representations. We then propose a masked\naccount graph autoencoder (MAGAE) using generative self-supervised learning,\nwhich achieves superior node-level account detection by focusing on\nreconstructing account node features. To enable MAGAE to scale for large-scale\ntraining, we propose to integrate layer-neighbor sampling into the graph, which\nreduces the number of sampled vertices by several times without compromising\ntraining quality. Finally, using a cross-attention fusion network, we unify the\nembeddings of TxCLM and MAGAE to leverage the benefits of both. We evaluate our\nmethod against 21 baseline approaches on three datasets. Experimental results\nshow that our method outperforms the best baseline by over 10% in F1-score on\ntwo of the datasets."}
{"id": "2509.03875", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03875", "abs": "https://arxiv.org/abs/2509.03875", "authors": ["Ziyou Jiang", "Mingyang Li", "Guowei Yang", "Lin Shi", "Qing Wang"], "title": "VulRTex: A Reasoning-Guided Approach to Identify Vulnerabilities from Rich-Text Issue Report", "comment": "25 pages, 7 figures, submitting to TOSEM journal", "summary": "Software vulnerabilities exist in open-source software (OSS), and the\ndevelopers who discover these vulnerabilities may submit issue reports (IRs) to\ndescribe their details. Security practitioners need to spend a lot of time\nmanually identifying vulnerability-related IRs from the community, and the time\ngap may be exploited by attackers to harm the system. Previously, researchers\nhave proposed automatic approaches to facilitate identifying these\nvulnerability-related IRs, but these works focus on textual descriptions but\nlack the comprehensive analysis of IR's rich-text information. In this paper,\nwe propose VulRTex, a reasoning-guided approach to identify\nvulnerability-related IRs with their rich-text information. In particular,\nVulRTex first utilizes the reasoning ability of the Large Language Model (LLM)\nto prepare the Vulnerability Reasoning Database with historical IRs. Then, it\nretrieves the relevant cases from the prepared reasoning database to generate\nreasoning guidance, which guides LLM to identify vulnerabilities by reasoning\nanalysis on target IRs' rich-text information. To evaluate the performance of\nVulRTex, we conduct experiments on 973,572 IRs, and the results show that\nVulRTex achieves the highest performance in identifying the\nvulnerability-related IRs and predicting CWE-IDs when the dataset is\nimbalanced, outperforming the best baseline with +11.0% F1, +20.2% AUPRC, and\n+10.5% Macro-F1, and 2x lower time cost than baseline reasoning approaches.\nFurthermore, VulRTex has been applied to identify 30 emerging vulnerabilities\nacross 10 representative OSS projects in 2024's GitHub IRs, and 11 of them are\nsuccessfully assigned CVE-IDs, which illustrates VulRTex's practicality."}
{"id": "2509.03985", "categories": ["cs.CR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.03985", "abs": "https://arxiv.org/abs/2509.03985", "authors": ["Chuhan Zhang", "Ye Zhang", "Bowen Shi", "Yuyou Gan", "Tianyu Du", "Shouling Ji", "Dazhan Deng", "Yingcai Wu"], "title": "NeuroBreak: Unveil Internal Jailbreak Mechanisms in Large Language Models", "comment": "12 pages, 9 figures", "summary": "In deployment and application, large language models (LLMs) typically undergo\nsafety alignment to prevent illegal and unethical outputs. However, the\ncontinuous advancement of jailbreak attack techniques, designed to bypass\nsafety mechanisms with adversarial prompts, has placed increasing pressure on\nthe security defenses of LLMs. Strengthening resistance to jailbreak attacks\nrequires an in-depth understanding of the security mechanisms and\nvulnerabilities of LLMs. However, the vast number of parameters and complex\nstructure of LLMs make analyzing security weaknesses from an internal\nperspective a challenging task. This paper presents NeuroBreak, a top-down\njailbreak analysis system designed to analyze neuron-level safety mechanisms\nand mitigate vulnerabilities. We carefully design system requirements through\ncollaboration with three experts in the field of AI security. The system\nprovides a comprehensive analysis of various jailbreak attack methods. By\nincorporating layer-wise representation probing analysis, NeuroBreak offers a\nnovel perspective on the model's decision-making process throughout its\ngeneration steps. Furthermore, the system supports the analysis of critical\nneurons from both semantic and functional perspectives, facilitating a deeper\nexploration of security mechanisms. We conduct quantitative evaluations and\ncase studies to verify the effectiveness of our system, offering mechanistic\ninsights for developing next-generation defense strategies against evolving\njailbreak attacks."}
{"id": "2509.03876", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03876", "abs": "https://arxiv.org/abs/2509.03876", "authors": ["Xingchu Chen", "Chengwei Liu", "Jialun Cao", "Yang Xiao", "Xinyue Cai", "Yeting Li", "Jingyi Shi", "Tianqi Sun", "Haiming Chen ang Wei Huo"], "title": "Vulnerability-Affected Versions Identification: How Far Are We?", "comment": null, "summary": "Identifying which software versions are affected by a vulnerability is\ncritical for patching, risk mitigation.Despite a growing body of tools, their\nreal-world effectiveness remains unclear due to narrow evaluation scopes often\nlimited to early SZZ variants, outdated techniques, and small or\ncoarse-graineddatasets. In this paper, we present the first comprehensive\nempirical study of vulnerability affected versions identification. We curate a\nhigh quality benchmark of 1,128 real-world C/C++ vulnerabilities and\nsystematically evaluate 12 representative tools from both tracing and matching\nparadigms across four dimensions: effectiveness at both vulnerability and\nversion levels, root causes of false positives and negatives, sensitivity to\npatch characteristics, and ensemble potential. Our findings reveal fundamental\nlimitations: no tool exceeds 45.0% accuracy, with key challenges stemming from\nheuristic dependence, limited semantic reasoning, and rigid matching logic.\nPatch structures such as add-only and cross-file changes further hinder\nperformance. Although ensemble strategies can improve results by up to 10.1%,\noverall accuracy remains below 60.0%, highlighting the need for fundamentally\nnew approaches. Moreover, our study offers actionable insights to guide tool\ndevelopment, combination strategies, and future research in this critical area.\nFinally, we release the replicated code and benchmark on our website to\nencourage future contributions.outdated techniques, and small or coarse grained\ndatasets."}
{"id": "2509.04010", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04010", "abs": "https://arxiv.org/abs/2509.04010", "authors": ["Olivier Adjonyo", "Sebastien Bardin", "Emanuele Bellini", "Gilbert Ndollane Dione", "Mahmudul Faisal Al Ameen", "Robert Merget", "Frederic Recoules", "Yanis Sellami"], "title": "Systematic Timing Leakage Analysis of NIST PQDSS Candidates: Tooling and Lessons Learned", "comment": "20 pages, 1 figure, to be published and presented at Sixth PQC\n  Standardization Conference by NIST, partially supported by the \"France 2030\"\n  government investment plan managed by the French National Research Agency,\n  under the reference ANR-22-PECY-0005", "summary": "The PQDSS standardization process requires cryptographic primitives to be\nfree from vulnerabilities, including timing and cache side-channels. Resistance\nto timing leakage is therefore an essential property, and achieving this\ntypically relies on software implementations that follow constant-time\nprinciples. Moreover, ensuring that all implementations are constant-time is\ncrucial for fair performance comparisons, as secure implementations often incur\nadditional overhead. Such analysis also helps identify scheme proposals that\nare inherently difficult to implement in constant time. Because constant-time\nproperties can be broken during compilation, it is often necessary to analyze\nthe compiled binary directly. Since manual binary analysis is extremely\nchallenging, automated analysis becomes highly important. Although several\ntools exist to assist with such analysis, they often have usability limitations\nand are difficult to set up correctly. To support the developers besides the\nNIST committee in verifying candidates, we developed a toolchain that automates\nconfiguration, execution, and result analysis for several widely used\nconstant-time analysis tools. We selected TIMECOP and Binsec/Rel2 to verify\nconstant-time policy compliance at the binary level, and dudect and RTLF to\ndetect side-channel vulnerabilities through statistical analysis of execution\ntime behavior. We demonstrate its effectiveness and practicability by\nevaluating the NIST PQDSS round 1 and round 2 implementations. We reported 26\nissues in total to the respective developers, and 5 of them have already been\nfixed. We also discuss our different findings, as well as the benefits of\nshortcomings of the different tools."}
{"id": "2509.03896", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03896", "abs": "https://arxiv.org/abs/2509.03896", "authors": ["Zushuai Zhang", "Elliott Wen", "Ewan Tempero"], "title": "Analyzing Variations in Dependency Distributions Due to Code Smell Interactions", "comment": null, "summary": "The existence of dependencies between modules, such as classes, can mean that\nchanging a module triggers ripple effects that make maintenance complex and\ncostly, so the advice is to minimize dependencies between modules. It is\ntherefore important to understand the circumstances that can lead to increased\ndependencies. Recent studies suggest that code smells, which are\ncharacteristics of code that indicate potential design issues, may interact in\nways that increase dependencies between modules. In this study, we aim to\nconfirm previous observations and investigate whether and how the distribution\nof static dependencies changes in the presence of code smell interactions. We\nconducted a dependency analysis on 116 open-source Java systems to quantify the\ninteractions, comparing interactions among code smells and interactions between\ncode smells and non-code smells. Our results suggest that while interactions\nbetween code smell pairs are associated with increases in certain dependencies\nand decreases in others, overall, they are associated with an increase in total\ndependencies. For example, the median number of dependencies between Feature\nEnvy methods and Data Classes is seven times as many as when the methods are\nnon-Feature Envy methods, increasing from 1 to 7. This implies that developers\nshould prioritize addressing code smells that interact with each other, rather\nthan code smells that exist only in isolation."}
{"id": "2509.04070", "categories": ["cs.CR", "cs.AR"], "pdf": "https://arxiv.org/pdf/2509.04070", "abs": "https://arxiv.org/abs/2509.04070", "authors": ["Paresh Baidya", "Rourab Paul", "Vikas Srivastava", "Sumit Kumar Debnath"], "title": "Error Detection Schemes for Barrett Reduction of CT-BU on FPGA in Post Quantum Cryptography", "comment": null, "summary": "A fault can occur naturally or intentionally. However, intentionally\ninjecting faults into hardware accelerators of Post-Quantum Cryptographic (PQC)\nalgorithms may leak sensitive information. This intentional fault injection in\nside-channel attacks compromises the reliability of PQC implementations. The\nrecently NIST-standardized key encapsulation mechanism (KEM), Kyber may also\nleak information at the hardware implementation level. This work proposes three\nefficient and lightweight recomputation-based fault detection methods for\nBarrett Reduction in the Cooley-Tukey Butterfly Unit (CT-BU) of Kyber on a\nField Programmable Gate Array (FPGA). The CT-BU and Barrett Reduction are\nfundamental components in structured lattice-based PQC algorithms, including\nKyber, NTRU, Falcon, CRYSTALS-Dilithium, etc. This paper introduces a new\nalgorithm, Recomputation with Swapped Operand (RESWO), for fault detection.\nWhile Recomputation with Negated Operand (RENO) and Recomputation with Shifted\nOperand (RESO) are existing methods used in other PQC hardware algorithms. To\nthe best of our knowledge, RENO and RESO have never been used in Barrett\nReduction before. The proposed RESWO method consumes a similar number of slices\ncompared to RENO and RESO. However, RESWO shows lesser delay compared to both\nRENO and RESO. The fault detection efficiency of RESWO, RENO, and RESO is\nnearly 100%."}
{"id": "2509.03900", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03900", "abs": "https://arxiv.org/abs/2509.03900", "authors": ["Yuvraj Agrawal"], "title": "The Auth Shim: A Lightweight Architectural Pattern for Integrating Enterprise SSO with Standalone Open-Source Applications", "comment": null, "summary": "Open-source software OSS is widely adopted in enterprise settings, but\nstandalone tools often lack native support for protocols like SAML or OIDC,\ncreating a critical security integration gap. This paper introduces and\nformalizes the Auth Shim, a lightweight architectural pattern designed to solve\nthis problem. The Auth Shim is a minimal, external proxy service that acts as a\ncompatibility layer, translating requests from an enterprise Identity Provider\nIdP into the native session management mechanism of a target application. A key\nprerequisite for this pattern is that the target application must expose a\nprogrammatic, secure administrative API. We present a case study of the\npattern's implementation at Adobe to integrate a popular OSS BI tool with Okta\nSAML, which enabled automated Role-Based Access Control RBAC via IAM group\nmapping and eliminated manual user provisioning. By defining its components,\ninteractions, and production deployment considerations, this paper provides a\nreusable, secure, and cost-effective blueprint for integrating any standalone\nOSS tool into an enterprise SSO ecosystem, thereby enabling organizations to\nembrace open-source innovation without compromising on security governance."}
{"id": "2509.04080", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04080", "abs": "https://arxiv.org/abs/2509.04080", "authors": ["Francesco Aurelio Pironti", "Angelo Furfaro", "Francesco Blefari", "Carmelo Felicetti", "Matteo Lupinacci", "Francesco Romeo"], "title": "ICSLure: A Very High Interaction Honeynet for PLC-based Industrial Control Systems", "comment": null, "summary": "The security of Industrial Control Systems (ICSs) is critical to ensuring the\nsafety of industrial processes and personnel. The rapid adoption of Industrial\nInternet of Things (IIoT) technologies has expanded system functionality but\nalso increased the attack surface, exposing ICSs to a growing range of cyber\nthreats. Honeypots provide a means to detect and analyze such threats by\nemulating target systems and capturing attacker behavior. However, traditional\nICS honeypots, often limited to software-based simulations of a single\nProgrammable Logic Controller (PLC), lack the realism required to engage\nsophisticated adversaries. In this work, we introduce a modular honeynet\nframework named ICSLure. The framework has been designed to emulate realistic\nICS environments. Our approach integrates physical PLCs interacting with live\ndata sources via industrial protocols such as Modbus and Profinet RTU, along\nwith virtualized network components including routers, switches, and Remote\nTerminal Units (RTUs). The system incorporates comprehensive monitoring\ncapabilities to collect detailed logs of attacker interactions. We demonstrate\nthat our framework enables coherent and high-fidelity emulation of real-world\nindustrial plants. This high-interaction environment significantly enhances the\nquality of threat data collected and supports advanced analysis of ICS-specific\nattack strategies, contributing to more effective detection and mitigation\ntechniques."}
{"id": "2509.04078", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.04078", "abs": "https://arxiv.org/abs/2509.04078", "authors": ["Jingjing Liu", "Zeming Liu", "Zihao Cheng", "Mengliang He", "Xiaoming Shi", "Yuhang Guo", "Xiangrong Zhu", "Yuanfang Guo", "Yunhong Wang", "Haifeng Wang"], "title": "RepoDebug: Repository-Level Multi-Task and Multi-Language Debugging Evaluation of Large Language Models", "comment": "30 pages, 12 figures, EMNLP 2025 Findings", "summary": "Large Language Models (LLMs) have exhibited significant proficiency in code\ndebugging, especially in automatic program repair, which may substantially\nreduce the time consumption of developers and enhance their efficiency.\nSignificant advancements in debugging datasets have been made to promote the\ndevelopment of code debugging. However, these datasets primarily focus on\nassessing the LLM's function-level code repair capabilities, neglecting the\nmore complex and realistic repository-level scenarios, which leads to an\nincomplete understanding of the LLM's challenges in repository-level debugging.\nWhile several repository-level datasets have been proposed, they often suffer\nfrom limitations such as limited diversity of tasks, languages, and error\ntypes. To mitigate this challenge, this paper introduces RepoDebug, a\nmulti-task and multi-language repository-level code debugging dataset with 22\nsubtypes of errors that supports 8 commonly used programming languages and 3\ndebugging tasks. Furthermore, we conduct evaluation experiments on 10 LLMs,\nwhere Claude 3.5 Sonnect, the best-performing model, still cannot perform well\nin repository-level debugging."}
{"id": "2509.04091", "categories": ["cs.CR", "68M25", "K.6.5; D.2.7"], "pdf": "https://arxiv.org/pdf/2509.04091", "abs": "https://arxiv.org/abs/2509.04091", "authors": ["Jintao Gu", "Haolang Lu", "Guoshun Nan", "Yihan Lin", "Kun Wang", "Yuchun Guo", "Yigui Cao", "Yang Liu"], "title": "Revisiting Third-Party Library Detection: A Ground Truth Dataset and Its Implications Across Security Tasks", "comment": "20pages, 7figures", "summary": "Accurate detection of third-party libraries (TPLs) is fundamental to Android\nsecurity, supporting vulnerability tracking, malware detection, and supply\nchain auditing. Despite many proposed tools, their real-world effectiveness\nremains unclear.We present the first large-scale empirical study of ten\nstate-of-the-art TPL detection techniques across over 6,000 apps, enabled by a\nnew ground truth dataset with precise version-level annotations for both remote\nand local dependencies.Our evaluation exposes tool fragility to R8-era\ntransformations, weak version discrimination, inaccurate correspondence of\ncandidate libraries, difficulty in generalizing similarity thresholds, and\nprohibitive runtime/memory overheads at scale.Beyond tool assessment, we\nfurther analyze how TPLs shape downstream tasks, including vulnerability\nanalysis, malware detection, secret leakage assessment, and LLM-based\nevaluation. From this perspective, our study provides concrete insights into\nhow TPL characteristics affect these tasks and informs future improvements in\nsecurity analysis."}
{"id": "2509.04260", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04260", "abs": "https://arxiv.org/abs/2509.04260", "authors": ["Haowei Quan", "Junjie Wang", "Xinzhe Li", "Terry Yue Zhuo", "Xiao Chen", "Xiaoning Du"], "title": "An Empirical Study of Vulnerabilities in Python Packages and Their Detection", "comment": null, "summary": "In the rapidly evolving software development landscape, Python stands out for\nits simplicity, versatility, and extensive ecosystem. Python packages, as units\nof organization, reusability, and distribution, have become a pressing concern,\nhighlighted by the considerable number of vulnerability reports. As a scripting\nlanguage, Python often cooperates with other languages for performance or\ninteroperability. This adds complexity to the vulnerabilities inherent to\nPython packages, and the effectiveness of current vulnerability detection tools\nremains underexplored. This paper addresses these gaps by introducing PyVul,\nthe first comprehensive benchmark suite of Python-package vulnerabilities.\nPyVul includes 1,157 publicly reported, developer-verified vulnerabilities,\neach linked to its affected packages. To accommodate diverse detection\ntechniques, it provides annotations at both commit and function levels. An\nLLM-assisted data cleansing method is incorporated to improve label accuracy,\nachieving 100% commit-level and 94% function-level accuracy, establishing PyVul\nas the most precise large-scale Python vulnerability benchmark. We further\ncarry out a distribution analysis of PyVul, which demonstrates that\nvulnerabilities in Python packages involve multiple programming languages and\nexhibit a wide variety of types. Moreover, our analysis reveals that\nmulti-lingual Python packages are potentially more susceptible to\nvulnerabilities. Evaluation of state-of-the-art detectors using this benchmark\nreveals a significant discrepancy between the capabilities of existing tools\nand the demands of effectively identifying real-world security issues in Python\npackages. Additionally, we conduct an empirical review of the top-ranked CWEs\nobserved in Python packages, to diagnose the fine-grained limitations of\ncurrent detection tools and highlight the necessity for future advancements in\nthe field."}
{"id": "2509.04097", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04097", "abs": "https://arxiv.org/abs/2509.04097", "authors": ["Víctor Duarte Melo", "William J. Buchanan"], "title": "ECCFROG522PP: An Enhanced 522-bit Weierstrass Elliptic Curve", "comment": null, "summary": "Whilst many key exchange and digital signature systems still rely on NIST\nP-256 (secp256r1) and secp256k1, offering around 128-bit security, there is an\nincreasing demand for transparent and reproducible curves at the 256-bit\nsecurity level. Standard higher-security options include NIST P-521, Curve448,\nand Brainpool-P512. This paper presents ECCFROG522PP (\"Presunto Powered\"), a\n522-bit prime-field elliptic curve that delivers security in the same classical\napprox 260-bit ballpark as NIST P-521, but with a fundamentally different\ndesign philosophy. All of the curve parameters are deterministically derived\nfrom a fixed public seed via BLAKE3, with zero hidden choices. The curve has\nprime order (cofactor = 1), a verified twist with a proven approx 505-bit prime\nfactor, safe embedding degree (greater than or equal to 14), and passes\nanti-MOV checks up to k less than or equal to 200 and CM discriminant sanity up\nto 100k. Unlike prior opaque or ad-hoc constructions, ECCFROG522PP is fully\nreproducible: anyone can regenerate and verify it byte-for-byte using the\npublished scripts. The intent is not to outperform NIST P-521 in raw speed, but\nto maximise trust, verifiability, and long-term auditability in a practical\ncurve of equivalent security level"}
{"id": "2509.04328", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04328", "abs": "https://arxiv.org/abs/2509.04328", "authors": ["Amine Barrak", "Emna Ksontini", "Ridouane Atike", "Fehmi Jaafar"], "title": "FaaSGuard: Secure CI/CD for Serverless Applications -- An OpenFaaS Case Study", "comment": "IEEE International Conference on Source Code Analysis & Manipulation\n  (SCAM 2025)", "summary": "Serverless computing significantly alters software development by abstracting\ninfrastructure management and enabling rapid, modular, event-driven\ndeployments. Despite its benefits, the distinct characteristics of serverless\nfunctions, such as ephemeral execution and fine-grained scalability, pose\nunique security challenges, particularly in open-source platforms like\nOpenFaaS. Existing approaches typically address isolated phases of the\nDevSecOps lifecycle, lacking an integrated and comprehensive security strategy.\nTo bridge this gap, we propose FaaSGuard, a unified DevSecOps pipeline\nexplicitly designed for open-source serverless environments. FaaSGuard\nsystematically embeds lightweight, fail-closed security checks into every stage\nof the development lifecycle-planning, coding, building, deployment, and\nmonitoring-effectively addressing threats such as injection attacks, hard-coded\nsecrets, and resource exhaustion. We validate our approach empirically through\na case study involving 20 real-world serverless functions from public GitHub\nrepositories. Results indicate that FaaSGuard effectively detects and prevents\ncritical vulnerabilities, demonstrating high precision (95%) and recall (91%)\nwithout significant disruption to established CI/CD practices."}
{"id": "2509.04191", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.04191", "abs": "https://arxiv.org/abs/2509.04191", "authors": ["Omri Sgan Cohen", "Ehud Malul", "Yair Meidan", "Dudu Mimran", "Yuval Elovici", "Asaf Shabtai"], "title": "KubeGuard: LLM-Assisted Kubernetes Hardening via Configuration Files and Runtime Logs Analysis", "comment": null, "summary": "The widespread adoption of Kubernetes (K8s) for orchestrating cloud-native\napplications has introduced significant security challenges, such as\nmisconfigured resources and overly permissive configurations. Failing to\naddress these issues can result in unauthorized access, privilege escalation,\nand lateral movement within clusters. Most existing K8s security solutions\nfocus on detecting misconfigurations, typically through static analysis or\nanomaly detection. In contrast, this paper presents KubeGuard, a novel runtime\nlog-driven recommender framework aimed at mitigating risks by addressing overly\npermissive configurations. KubeGuard is designed to harden K8s environments\nthrough two complementary tasks: Resource Creation and Resource Refinement. It\nleverages large language models (LLMs) to analyze manifests and runtime logs\nreflecting actual system behavior, using modular prompt-chaining workflows.\nThis approach enables KubeGuard to create least-privilege configurations for\nnew resources and refine existing manifests to reduce the attack surface.\nKubeGuard's output manifests are presented as recommendations that users (e.g.,\ndevelopers and operators) can review and adopt to enhance cluster security. Our\nevaluation demonstrates that KubeGuard effectively generates and refines K8s\nmanifests for Roles, NetworkPolicies, and Deployments, leveraging both\nproprietary and open-source LLMs. The high precision, recall, and F1-scores\naffirm KubeGuard's practicality as a framework that translates runtime\nobservability into actionable, least-privilege configuration guidance."}
{"id": "2509.04423", "categories": ["cs.SE", "cs.DB"], "pdf": "https://arxiv.org/pdf/2509.04423", "abs": "https://arxiv.org/abs/2509.04423", "authors": ["Fatima Zulfiqar Ali", "Atrooba Ilyas"], "title": "Design and Development of a Web Platform for Blood Donation Management", "comment": "10 pages, 6 figures, conference", "summary": "Blood donation is a critical component of healthcare, yet locating suitable\ndonors in emergencies often presents significant challenges. This paper\npresents the design and development of a Blood Donation Web Platform, a\nweb-based system that connects patients, donors, and administrators within a\ncentralized digital space. The platform allows interested donors to register\ntheir personal information, including blood group, contact details, and\navailability. Patients can search for donors based on blood group and location,\nand the system provides a list of nearby donors who are ready to donate. The\nplatform design was guided by use case, database, class, and sequence diagrams\nto ensure a well-structured and efficient system architecture. Modern web\ntechnologies, including PHP (Laravel framework), HTML, CSS, Bootstrap, and\nMySQL, supported by XAMPP and Visual Studio Code, were employed to implement a\ndynamic, interactive, and user-friendly platform. By streamlining donor\nrefgistration, blood requests, and communication, the proposed system reduces\ndelays and complexities in emergencies, improving timely accessibility of blood\nand enhancing overall efficiency in blood donation services."}
{"id": "2509.04214", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04214", "abs": "https://arxiv.org/abs/2509.04214", "authors": ["Tyler Shumaker", "Jessica Carpenter", "David Saranchak", "Nathaniel D. Bastian"], "title": "An Automated, Scalable Machine Learning Model Inversion Assessment Pipeline", "comment": null, "summary": "Machine learning (ML) models have the potential to transform military\nbattlefields, presenting a large external pressure to rapidly incorporate them\ninto operational settings. However, it is well-established that these ML models\nare vulnerable to a number of adversarial attacks throughout the model\ndeployment pipeline that threaten to negate battlefield advantage. One broad\ncategory is privacy attacks (such as model inversion) where an adversary can\nreverse engineer information from the model, such as the sensitive data used in\nits training. The ability to quantify the risk of model inversion attacks\n(MIAs) is not well studied, and there is a lack of automated developmental test\nand evaluation (DT&E) tools and metrics to quantify the effectiveness of\nprivacy loss of the MIA. The current DT&E process is difficult because ML model\ninversions can be hard for a human to interpret, subjective when they are\ninterpretable, and difficult to quantify in terms of inversion quality.\nAdditionally, scaling the DT&E process is challenging due to many ML model\narchitectures and data modalities that need to be assessed. In this work, we\npresent a novel DT&E tool that quantifies the risk of data privacy loss from\nMIAs and introduces four adversarial risk dimensions to quantify privacy loss.\nOur DT&E pipeline combines inversion with vision language models (VLMs) to\nimprove effectiveness while enabling scalable analysis. We demonstrate\neffectiveness using multiple MIA techniques and VLMs configured for zero-shot\nclassification and image captioning. We benchmark the pipeline using several\nstate-of-the-art MIAs in the computer vision domain with an image\nclassification task that is typical in military applications. In general, our\ninnovative pipeline extends the current model inversion DT&E capabilities by\nimproving the effectiveness and scalability of the privacy loss analysis in an\nautomated fashion."}
{"id": "2509.03711", "categories": ["cs.CR", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03711", "abs": "https://arxiv.org/abs/2509.03711", "authors": ["Siddharth Muralee", "Sourag Cherupattamoolayil", "James C. Davis", "Antonio Bianchi", "Aravind Machiry"], "title": "Reactive Bottom-Up Testing", "comment": null, "summary": "Modern computing systems remain rife with software vulnerabilities. Engineers\napply many means to detect them, of which dynamic testing is one of the most\ncommon and effective. However, most dynamic testing techniques follow a\ntop-down paradigm, and struggle to reach and exercise functions deep within the\ncall graph. While recent works have proposed Bottom-Up approaches to address\nthese limitations, they face challenges with false positives and generating\nvalid inputs that adhere to the context of the entire program.\n  In this work, we introduce a new paradigm that we call Reactive Bottom-Up\nTesting. Our insight is that function-level testing is necessary but not\nsufficient for the validation of vulnerabilities in functions. What we need is\na systematic approach that not only tests functions in isolation but also\nvalidates their behavior within the broader program context, ensuring that\ndetected vulnerabilities are both reachable and triggerable. We develop a\nthree-stage bottom-up testing scheme: (1) identify likely-vulnerable functions\nand generate type- and context-aware harnesses; (2) fuzz to find crashes and\nextract input constraints via symbolic execution; (3) verify crashes by\ncombining constraints to remove false positives. We implemented an automated\nprototype, which we call Griller. We evaluated Griller in a controlled setting\nusing a benchmark of 48 known vulnerabilities across 5 open-source projects,\nwhere we successfully detected 28 known vulnerabilities. Additionally, we\nevaluated Griller on several real-world applications such as Pacman, and it\ndiscovered 6 previously unknown vulnerabilities. Our findings suggest that\nReactive Bottom-Up Testing can significantly enhance the detection of\nvulnerabilities in complex systems, paving the way for more robust security\npractices."}
{"id": "2509.03900", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03900", "abs": "https://arxiv.org/abs/2509.03900", "authors": ["Yuvraj Agrawal"], "title": "The Auth Shim: A Lightweight Architectural Pattern for Integrating Enterprise SSO with Standalone Open-Source Applications", "comment": null, "summary": "Open-source software OSS is widely adopted in enterprise settings, but\nstandalone tools often lack native support for protocols like SAML or OIDC,\ncreating a critical security integration gap. This paper introduces and\nformalizes the Auth Shim, a lightweight architectural pattern designed to solve\nthis problem. The Auth Shim is a minimal, external proxy service that acts as a\ncompatibility layer, translating requests from an enterprise Identity Provider\nIdP into the native session management mechanism of a target application. A key\nprerequisite for this pattern is that the target application must expose a\nprogrammatic, secure administrative API. We present a case study of the\npattern's implementation at Adobe to integrate a popular OSS BI tool with Okta\nSAML, which enabled automated Role-Based Access Control RBAC via IAM group\nmapping and eliminated manual user provisioning. By defining its components,\ninteractions, and production deployment considerations, this paper provides a\nreusable, secure, and cost-effective blueprint for integrating any standalone\nOSS tool into an enterprise SSO ecosystem, thereby enabling organizations to\nembrace open-source innovation without compromising on security governance."}
{"id": "2509.03807", "categories": ["cs.CR", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03807", "abs": "https://arxiv.org/abs/2509.03807", "authors": ["Junhui Li", "Chengbin Feng", "Zhiwei Yang", "Qi Mo", "Wei Wang"], "title": "BIDO: A Unified Approach to Address Obfuscation and Concept Drift Challenges in Image-based Malware Detection", "comment": null, "summary": "To identify malicious Android applications, various malware detection\ntechniques have been proposed. Among them, image-based approaches are\nconsidered potential alternatives due to their efficiency and scalability.\nRecent studies have reported that these approaches suffer significant\nperformance declines when confronted with obfuscation or concept drift.\nHowever, existing solutions often treat these two challenges as different\nproblems, offering independent solutions. These techniques overlook the fact\nthat both challenges share a common statistical root, out-of-distribution, and\nresearch from this perspective remains limited. In response, we propose BIDO, a\nhybrid image-based malware detector designed to enhance robustness against both\nobfuscation and concept drift simultaneously. Specifically, to improve the\ndiscriminative power of image features, we introduce a local feature selection\nmodule that identifies informative subregions within malware images. Second, to\nenhance feature robustness, we model pairwise cross-modal dependencies in an\nouter product space, enabling the extraction of stable co-occurrence patterns.\nThird, to ensure feature compactness, we design a learnable metric that pulls\nsamples with identical labels closer while pushing apart those with different\nlabels, regardless of obfuscation or concept drift. Extensive experiments on\nthe real-world datasets demonstrate that BIDO significantly outperforms\nexisting baselines, achieving higher robustness against both concept drift and\nobfuscation. The source code is available at:\nhttps://github.com/whatishope/BIDO/."}
{"id": "2509.04260", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04260", "abs": "https://arxiv.org/abs/2509.04260", "authors": ["Haowei Quan", "Junjie Wang", "Xinzhe Li", "Terry Yue Zhuo", "Xiao Chen", "Xiaoning Du"], "title": "An Empirical Study of Vulnerabilities in Python Packages and Their Detection", "comment": null, "summary": "In the rapidly evolving software development landscape, Python stands out for\nits simplicity, versatility, and extensive ecosystem. Python packages, as units\nof organization, reusability, and distribution, have become a pressing concern,\nhighlighted by the considerable number of vulnerability reports. As a scripting\nlanguage, Python often cooperates with other languages for performance or\ninteroperability. This adds complexity to the vulnerabilities inherent to\nPython packages, and the effectiveness of current vulnerability detection tools\nremains underexplored. This paper addresses these gaps by introducing PyVul,\nthe first comprehensive benchmark suite of Python-package vulnerabilities.\nPyVul includes 1,157 publicly reported, developer-verified vulnerabilities,\neach linked to its affected packages. To accommodate diverse detection\ntechniques, it provides annotations at both commit and function levels. An\nLLM-assisted data cleansing method is incorporated to improve label accuracy,\nachieving 100% commit-level and 94% function-level accuracy, establishing PyVul\nas the most precise large-scale Python vulnerability benchmark. We further\ncarry out a distribution analysis of PyVul, which demonstrates that\nvulnerabilities in Python packages involve multiple programming languages and\nexhibit a wide variety of types. Moreover, our analysis reveals that\nmulti-lingual Python packages are potentially more susceptible to\nvulnerabilities. Evaluation of state-of-the-art detectors using this benchmark\nreveals a significant discrepancy between the capabilities of existing tools\nand the demands of effectively identifying real-world security issues in Python\npackages. Additionally, we conduct an empirical review of the top-ranked CWEs\nobserved in Python packages, to diagnose the fine-grained limitations of\ncurrent detection tools and highlight the necessity for future advancements in\nthe field."}
