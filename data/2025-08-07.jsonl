{"id": "2508.03846", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03846", "abs": "https://arxiv.org/abs/2508.03846", "authors": ["Hashini Gunatilake", "John Grundy", "Rashina Hoda", "Ingo Mueller"], "title": "Empathy Guidelines for Improving Practitioner Well-being & Software Engineering Practices", "comment": null, "summary": "Empathy is a powerful yet often overlooked element in software engineering\n(SE), supporting better teamwork, smoother communication, and effective\ndecision-making. In our previous study, we identified a range of practitioner\nstrategies for fostering empathy in SE contexts. Building on these insights,\nthis paper introduces 17 actionable empathy guidelines designed to support\npractitioners, teams, and organisations. We also explore how these guidelines\ncan be implemented in practice by examining real-world applications,\nchallenges, and strategies to overcome them shared by software practitioners.\nTo support adoption, we present a visual prioritisation framework that\ncategorises the guidelines based on perceived importance, ease of\nimplementation, and willingness to adopt. The findings offer practical and\nflexible suggestions for integrating empathy into everyday SE work, helping\nteams move from principles to sustainable action."}
{"id": "2508.03856", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2508.03856", "abs": "https://arxiv.org/abs/2508.03856", "authors": ["Richard Hegewald", "Rebecca Beyer"], "title": "Evaluating Software Supply Chain Security in Research Software", "comment": "Accepted at conference GI SKILL 2025", "summary": "The security of research software is essential for ensuring the integrity and\nreproducibility of scientific results. However, research software security is\nstill largely unexplored. Due to its dependence on open source components and\ndistributed development practices, research software is particularly vulnerable\nto supply chain attacks. This study analyses 3,248 high-quality, largely\npeer-reviewed research software repositories using the OpenSSF Scorecard. We\nfind a generally weak security posture with an average score of 3.5/10.\nImportant practices, such as signed releases and branch protection, are rarely\nimplemented. Finally, we present actionable, low-effort recommendations that\ncan help research teams improve software security and mitigate potential\nthreats to scientific integrity."}
{"id": "2508.03881", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03881", "abs": "https://arxiv.org/abs/2508.03881", "authors": ["Martin Obaidi", "Kushtrim Qengaj", "Jakob Droste", "Hannah Deters", "Marc Herrmann", "Jil Kl√ºnder", "Elisa Schmid", "Kurt Schneider"], "title": "From App Features to Explanation Needs: Analyzing Correlations and Predictive Potential", "comment": "This paper has been accepted at the 33rd IEEE International\n  Requirements Engineering Workshop (REW 2025)", "summary": "In today's digitized world, software systems must support users in\nunderstanding both how to interact with a system and why certain behaviors\noccur. This study investigates whether explanation needs, classified from user\nreviews, can be predicted based on app properties, enabling early consideration\nduring development and large-scale requirements mining. We analyzed a gold\nstandard dataset of 4,495 app reviews enriched with metadata (e.g., app\nversion, ratings, age restriction, in-app purchases). Correlation analyses\nidentified mostly weak associations between app properties and explanation\nneeds, with moderate correlations only for specific features such as app\nversion, number of reviews, and star ratings. Linear regression models showed\nlimited predictive power, with no reliable forecasts across configurations.\nValidation on a manually labeled dataset of 495 reviews confirmed these\nfindings. Categories such as Security & Privacy and System Behavior showed\nslightly higher predictive potential, while Interaction and User Interface\nremained most difficult to predict. Overall, our results highlight that\nexplanation needs are highly context-dependent and cannot be precisely inferred\nfrom app metadata alone. Developers and requirements engineers should therefore\nsupplement metadata analysis with direct user feedback to effectively design\nexplainable and user-centered software systems."}
{"id": "2508.03922", "categories": ["cs.SE", "cs.HC", "D.2.1"], "pdf": "https://arxiv.org/pdf/2508.03922", "abs": "https://arxiv.org/abs/2508.03922", "authors": ["Soroush Heydari"], "title": "A Human Centric Requirements Engineering Framework for Assessing Github Copilot Output", "comment": "8 pages", "summary": "The rapid adoption of Artificial Intelligence(AI) programming assistants such\nas GitHub Copilot introduces new challenges in how these software tools address\nhuman needs. Many existing evaluation frameworks address technical aspects such\nas code correctness and efficiency, but often overlook crucial human factors\nthat affect the successful integration of AI assistants in software development\nworkflows. In this study, I analyzed GitHub Copilot's interaction with users\nthrough its chat interface, measured Copilot's ability to adapt explanations\nand code generation to user expertise levels, and assessed its effectiveness in\nfacilitating collaborative programming experiences. I established a\nhuman-centered requirements framework with clear metrics to evaluate these\nqualities in GitHub Copilot chat. I discussed the test results and their\nimplications for future analysis of human requirements in automated\nprogramming."}
{"id": "2508.03696", "categories": ["cs.CR", "cs.AI", "cs.CV"], "pdf": "https://arxiv.org/pdf/2508.03696", "abs": "https://arxiv.org/abs/2508.03696", "authors": ["Xinqi Lyu", "Yihao Liu", "Yanjie Li", "Bin Xiao"], "title": "PLA: Prompt Learning Attack against Text-to-Image Generative Models", "comment": "10 pages, 3 figures, and published to ICCV2025", "summary": "Text-to-Image (T2I) models have gained widespread adoption across various\napplications. Despite the success, the potential misuse of T2I models poses\nsignificant risks of generating Not-Safe-For-Work (NSFW) content. To\ninvestigate the vulnerability of T2I models, this paper delves into adversarial\nattacks to bypass the safety mechanisms under black-box settings. Most previous\nmethods rely on word substitution to search adversarial prompts. Due to limited\nsearch space, this leads to suboptimal performance compared to gradient-based\ntraining. However, black-box settings present unique challenges to training\ngradient-driven attack methods, since there is no access to the internal\narchitecture and parameters of T2I models. To facilitate the learning of\nadversarial prompts in black-box settings, we propose a novel prompt learning\nattack framework (PLA), where insightful gradient-based training tailored to\nblack-box T2I models is designed by utilizing multimodal similarities.\nExperiments show that our new method can effectively attack the safety\nmechanisms of black-box T2I models including prompt filters and post-hoc safety\ncheckers with a high success rate compared to state-of-the-art methods.\nWarning: This paper may contain offensive model-generated content."}
{"id": "2508.03931", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03931", "abs": "https://arxiv.org/abs/2508.03931", "authors": ["Everton Guimaraes", "Nathalia Nascimento", "Chandan Shivalingaiah", "Asish Nelapati"], "title": "Analyzing Prominent LLMs: An Empirical Study of Performance and Complexity in Solving LeetCode Problems", "comment": "11 pages, 13 figures, 29th International Conference on Evaluation and\n  Assessment in Software Engineering (EASE)", "summary": "Large Language Models (LLMs) like ChatGPT, Copilot, Gemini, and DeepSeek are\ntransforming software engineering by automating key tasks, including code\ngeneration, testing, and debugging. As these models become integral to\ndevelopment workflows, a systematic comparison of their performance is\nessential for optimizing their use in real world applications. This study\nbenchmarks these four prominent LLMs on one hundred and fifty LeetCode problems\nacross easy, medium, and hard difficulties, generating solutions in Java and\nPython. We evaluate each model based on execution time, memory usage, and\nalgorithmic complexity, revealing significant performance differences. ChatGPT\ndemonstrates consistent efficiency in execution time and memory usage, while\nCopilot and DeepSeek show variability as task complexity increases. Gemini,\nalthough effective on simpler tasks, requires more attempts as problem\ndifficulty rises. Our findings provide actionable insights into each model's\nstrengths and limitations, offering guidance for developers selecting LLMs for\nspecific coding tasks and providing insights on the performance and complexity\nof GPT-like generated solutions."}
{"id": "2508.03879", "categories": ["cs.CR", "cs.OS", "D.4.6; K.6.5; C.2.0"], "pdf": "https://arxiv.org/pdf/2508.03879", "abs": "https://arxiv.org/abs/2508.03879", "authors": ["Arjun Juneja"], "title": "RX-INT: A Kernel Engine for Real-Time Detection and Analysis of In-Memory Threats", "comment": "10 pages, 8 figures, 1 table. Presents RX-INT, a kernel-mode system\n  for real-time detection of fileless malware using event-driven VAD scanning\n  and automated import resolution. Demonstrates superior detection capabilities\n  against PE-sieve on advanced evasion techniques including module stomping and\n  headerless manual mapping", "summary": "Malware and cheat developers use fileless execution techniques to evade\ntraditional, signature-based security products. These methods include various\ntypes of manual mapping, module stomping, and threadless injection which work\nentirely within the address space of a legitimate process, presenting a\nchallenge for detection due to ambiguity between what is legitimate and what\nisn't. Existing tools often have weaknesses, such as a dependency on Portable\nExecutable (PE) structures or a vulnerability to time-of-check-to-time-of-use\n(TOCTOU) race conditions where an adversary cleans up before a periodic scan\nhas the chance to occur. To address this gap, we present RX-INT, a\nkernel-assisted system featuring an architecture that provides resilience\nagainst TOCTOU attacks. RX-INT introduces a detection engine that combines a\nreal-time thread creation monitor with a stateful Virtual Address Descriptor\n(VAD) scanner alongside various heuristics within. This engine snapshots both\nprivate and image-backed memory regions, using real-time memory hashing to\ndetect illicit modifications like module stomping. Critically, we demonstrate a\nhigher detection rate in certain benchmarks of this approach through a direct\ncomparison with PE-sieve, a commonly used and powerful memory forensics tool.\nIn our evaluation, RX-INT successfully detected a manually mapped region that\nwas not identified by PE-sieve. We then conclude that our architecture\nrepresents a tangible difference in the detection of fileless threats, with\ndirect applications in the fields of anti-cheat and memory security."}
{"id": "2508.03949", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03949", "abs": "https://arxiv.org/abs/2508.03949", "authors": ["Md. Abdul Awal", "Mrigank Rochan", "Chanchal K. Roy"], "title": "Model Compression vs. Adversarial Robustness: An Empirical Study on Language Models for Code", "comment": null, "summary": "Transformer-based language models for code have shown remarkable performance\nin various software analytics tasks, but their adoption is hindered by high\ncomputational costs, slow inference speeds, and substantial environmental\nimpact. Model compression techniques such as pruning, quantization, and\nknowledge distillation have gained traction in addressing these challenges.\nHowever, the impact of these strategies on the robustness of compressed\nlanguage models for code in adversarial scenarios remains poorly understood.\nUnderstanding how these compressed models behave under adversarial attacks is\nessential for their safe and effective deployment in real-world applications.\nTo bridge this knowledge gap, we conduct a comprehensive evaluation of how\ncommon compression strategies affect the adversarial robustness of compressed\nmodels. We assess the robustness of compressed versions of three widely used\nlanguage models for code across three software analytics tasks, using six\nevaluation metrics and four commonly used classical adversarial attacks. Our\nfindings indicate that compressed models generally maintain comparable\nperformance to their uncompressed counterparts. However, when subjected to\nadversarial attacks, compressed models exhibit significantly reduced\nrobustness. These results reveal a trade-off between model size reduction and\nadversarial robustness, underscoring the need for careful consideration when\ndeploying compressed models in security-critical software applications. Our\nstudy highlights the need for further research into compression strategies that\nstrike a balance between computational efficiency and adversarial robustness,\nwhich is essential for deploying reliable language models for code in\nreal-world software applications."}
{"id": "2508.03882", "categories": ["cs.CR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.03882", "abs": "https://arxiv.org/abs/2508.03882", "authors": ["Arturo S√°nchez-Matas", "Pablo Escribano Ruiz", "Daniel D√≠az-L√≥pez", "Angel Luis Perales G√≥mez", "Pantaleone Nespoli", "Gregorio Mart√≠nez P√©rez"], "title": "Simulating Cyberattacks through a Breach Attack Simulation (BAS) Platform empowered by Security Chaos Engineering (SCE)", "comment": "8 pages, 4 figures, paper in proceedings of the \"X Jornadas\n  Nacionales de Investigaci\\'on en Ciberseguridad\" in Zaragoza, Spain, June,\n  2025", "summary": "In today digital landscape, organizations face constantly evolving cyber\nthreats, making it essential to discover slippery attack vectors through novel\ntechniques like Security Chaos Engineering (SCE), which allows teams to test\ndefenses and identify vulnerabilities effectively. This paper proposes to\nintegrate SCE into Breach Attack Simulation (BAS) platforms, leveraging\nadversary profiles and abilities from existing threat intelligence databases.\nThis innovative proposal for cyberattack simulation employs a structured\narchitecture composed of three layers: SCE Orchestrator, Connector, and BAS\nlayers. Utilizing MITRE Caldera in the BAS layer, our proposal executes\nautomated attack sequences, creating inferred attack trees from adversary\nprofiles. Our proposal evaluation illustrates how integrating SCE with BAS can\nenhance the effectiveness of attack simulations beyond traditional scenarios,\nand be a useful component of a cyber defense strategy."}
{"id": "2508.04125", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.04125", "abs": "https://arxiv.org/abs/2508.04125", "authors": ["Sangwon Hyun", "Hyunjun Kim", "Jinhyuk Jang", "Hyojin Choi", "M. Ali Babar"], "title": "Experimental Analysis of Productive Interaction Strategy with ChatGPT: User Study on Function and Project-level Code Generation Tasks", "comment": "The benchmark repository has not been publicly released yet due to\n  the IP policy in our institutions. If you would like to use the benchmark or\n  collaborate on extension, please contact \"dr.sangwon.hyun@gmail.com\"", "summary": "The application of Large Language Models (LLMs) is growing in the productive\ncompletion of Software Engineering tasks. Yet, studies investigating the\nproductive prompting techniques often employed a limited problem space,\nprimarily focusing on well-known prompting patterns and mainly targeting\nfunction-level SE practices. We identify significant gaps in real-world\nworkflows that involve complexities beyond class-level (e.g., multi-class\ndependencies) and different features that can impact Human-LLM Interactions\n(HLIs) processes in code generation. To address these issues, we designed an\nexperiment that comprehensively analyzed the HLI features regarding the code\ngeneration productivity. Our study presents two project-level benchmark tasks,\nextending beyond function-level evaluations. We conducted a user study with 36\nparticipants from diverse backgrounds, asking them to solve the assigned tasks\nby interacting with the GPT assistant using specific prompting patterns. We\nalso examined the participants' experience and their behavioral features during\ninteractions by analyzing screen recordings and GPT chat logs. Our statistical\nand empirical investigation revealed (1) that three out of 15 HLI features\nsignificantly impacted the productivity in code generation; (2) five primary\nguidelines for enhancing productivity for HLI processes; and (3) a taxonomy of\n29 runtime and logic errors that can occur during HLI processes, along with\nsuggested mitigation plans."}
{"id": "2508.03936", "categories": ["cs.CR", "cs.CL", "cs.LG", "cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03936", "abs": "https://arxiv.org/abs/2508.03936", "authors": ["Xiangzhe Xu", "Guangyu Shen", "Zian Su", "Siyuan Cheng", "Hanxi Guo", "Lu Yan", "Xuan Chen", "Jiasheng Jiang", "Xiaolong Jin", "Chengpeng Wang", "Zhuo Zhang", "Xiangyu Zhang"], "title": "ASTRA: Autonomous Spatial-Temporal Red-teaming for AI Software Assistants", "comment": "The first two authors (Xiangzhe Xu and Guangyu Shen) contributed\n  equally to this work", "summary": "AI coding assistants like GitHub Copilot are rapidly transforming software\ndevelopment, but their safety remains deeply uncertain-especially in\nhigh-stakes domains like cybersecurity. Current red-teaming tools often rely on\nfixed benchmarks or unrealistic prompts, missing many real-world\nvulnerabilities. We present ASTRA, an automated agent system designed to\nsystematically uncover safety flaws in AI-driven code generation and security\nguidance systems. ASTRA works in three stages: (1) it builds structured\ndomain-specific knowledge graphs that model complex software tasks and known\nweaknesses; (2) it performs online vulnerability exploration of each target\nmodel by adaptively probing both its input space, i.e., the spatial\nexploration, and its reasoning processes, i.e., the temporal exploration,\nguided by the knowledge graphs; and (3) it generates high-quality\nviolation-inducing cases to improve model alignment. Unlike prior methods,\nASTRA focuses on realistic inputs-requests that developers might actually\nask-and uses both offline abstraction guided domain modeling and online domain\nknowledge graph adaptation to surface corner-case vulnerabilities. Across two\nmajor evaluation domains, ASTRA finds 11-66% more issues than existing\ntechniques and produces test cases that lead to 17% more effective alignment\ntraining, showing its practical value for building safer AI systems."}
{"id": "2508.04295", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04295", "abs": "https://arxiv.org/abs/2508.04295", "authors": ["Chaofan Wang", "Tingrui Yu", "Jie Wang", "Dong Chen", "Wenrui Zhang", "Yuling Shi", "Xiaodong Gu", "Beijun Shen"], "title": "EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation", "comment": null, "summary": "Rust's compile-time safety guarantees make it ideal for safety-critical\nsystems, creating demand for translating legacy C codebases to Rust. While\nvarious approaches have emerged for this task, they face inherent trade-offs:\nrule-based solutions face challenges in meeting code safety and idiomaticity\nrequirements, while LLM-based solutions often fail to generate semantically\nequivalent Rust code, due to the heavy dependencies of modules across the\nentire codebase. Recent studies have revealed that both solutions are limited\nto small-scale programs. In this paper, we propose EvoC2Rust, an automated\nframework for converting entire C projects to equivalent Rust ones. EvoC2Rust\nemploys a skeleton-guided translation strategy for project-level translation.\nThe pipeline consists of three evolutionary stages: 1) it first decomposes the\nC project into functional modules, employs a feature-mapping-enhanced LLM to\ntransform definitions and macros and generates type-checked function stubs,\nwhich form a compilable Rust skeleton; 2) it then incrementally translates the\nfunction, replacing the corresponding stub placeholder; 3) finally, it repairs\ncompilation errors by integrating LLM and static analysis. Through evolutionary\naugmentation, EvoC2Rust combines the advantages of both rule-based and\nLLM-based solutions. Our evaluation on open-source benchmarks and six\nindustrial projects demonstrates EvoC2Rust's superior performance in\nproject-level C-to-Rust translation. On average, it achieves 17.24% and 14.32%\nimprovements in syntax and semantic accuracy over the LLM-based approaches,\nalong with a 96.79% higher code safety rate than the rule-based tools. At the\nmodule level, EvoC2Rust reaches 92.25% compilation and 89.53% test pass rates\non industrial projects, even for complex codebases and long functions."}
{"id": "2508.04094", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2508.04094", "abs": "https://arxiv.org/abs/2508.04094", "authors": ["Chengrui Sun", "Hua Zhang", "Haoran Gao", "Zian Tian", "Jianjin Zhao", "qi Li", "Hongliang Zhu", "Zongliang Shen", "Shang Wang", "Anmin Fu"], "title": "Isolate Trigger: Detecting and Eradicating Evade-Adaptive Backdoors", "comment": null, "summary": "All current detection of backdoor attacks on deep learning models fall under\nthe category of a non essential features(NEF), which focus on fighting against\nsimple and efficient vertical class backdoor -- trigger is small, few and not\noverlapping with the source. Evade-adaptive backdoor (EAB) attacks have evaded\nNEF detection and improved training efficiency. We introduces a precise,\nefficient and universal detection and defense framework coined as Isolate\nTrigger (IsTr). IsTr aims to find the hidden trigger by breaking the barrier of\nthe source features. Therefore, it investigates the essence of backdoor\ntriggering, and uses Steps and Differential-Middle-Slice as components to\nupdate past theories of distance and gradient. IsTr also plays a positive role\nin the model, whether the backdoor exists. For example, accurately find and\nrepair the wrong identification caused by deliberate or unintentional training\nin automatic driving. Extensive experiments on robustness scross various tasks,\nincluding MNIST, facial recognition, and traffic sign recognition, confirm the\nhigh efficiency, generality and precision of the IsTr. We rigorously evaluated\nthe effectiveness of the IsTr against a series of six EAB attacks, including\nBadnets, Sin-Wave, Multi-trigger, SSBAs, CASSOCK, HCB. None of these\ncountermeasures evade, even when attacks are combined and the trigger and\nsource overlap."}
{"id": "2508.04352", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04352", "abs": "https://arxiv.org/abs/2508.04352", "authors": ["Dragana Sunaric", "Charlotte Verbruggen", "Dominik Bork"], "title": "Vanilla-Converter: A Tool for Converting Camunda 7 BPMN Models into Camunda 8 Models", "comment": null, "summary": "As organizations prepare for the end-of-life of Camunda 7, manual migration\nremains complex due to fundamental differences between the two platforms. We\npresent Vanilla-Converter, a command-line tool that facilitates the migration\nof BPMN models from Camunda 7 to Camunda 8. Vanilla-Converter automates the\ntransformation process, supports a wide range of BPMN elements, and produces a\ntransformed model and a detailed transformation log indicating automatic\nchanges and remaining manual conversion tasks. The tool's effectiveness is\ndemonstrated through three case studies with real industrially used Camunda 7\nmodels, confirming its ability to convert these models into valid and\nexecutable Camunda 8 models."}
{"id": "2508.04100", "categories": ["cs.CR", "cs.AI", "cs.DC"], "pdf": "https://arxiv.org/pdf/2508.04100", "abs": "https://arxiv.org/abs/2508.04100", "authors": ["Borui Li", "Li Yan", "Junhao Han", "Jianmin Liu", "Lei Yu"], "title": "SenseCrypt: Sensitivity-guided Selective Homomorphic Encryption for Joint Federated Learning in Cross-Device Scenarios", "comment": "17 pages, 19 figures", "summary": "Homomorphic Encryption (HE) prevails in securing Federated Learning (FL), but\nsuffers from high overhead and adaptation cost. Selective HE methods, which\npartially encrypt model parameters by a global mask, are expected to protect\nprivacy with reduced overhead and easy adaptation. However, in cross-device\nscenarios with heterogeneous data and system capabilities, traditional\nSelective HE methods deteriorate client straggling, and suffer from degraded HE\noverhead reduction performance. Accordingly, we propose SenseCrypt, a\nSensitivity-guided selective Homomorphic EnCryption framework, to adaptively\nbalance security and HE overhead per cross-device FL client. Given the\nobservation that model parameter sensitivity is effective for measuring\nclients' data distribution similarity, we first design a privacy-preserving\nmethod to respectively cluster the clients with similar data distributions.\nThen, we develop a scoring mechanism to deduce the straggler-free ratio of\nmodel parameters that can be encrypted by each client per cluster. Finally, for\neach client, we formulate and solve a multi-objective model parameter selection\noptimization problem, which minimizes HE overhead while maximizing model\nsecurity without causing straggling. Experiments demonstrate that SenseCrypt\nensures security against the state-of-the-art inversion attacks, while\nachieving normal model accuracy as on IID data, and reducing training time by\n58.4%-88.7% as compared to traditional HE methods."}
{"id": "2508.04408", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2508.04408", "abs": "https://arxiv.org/abs/2508.04408", "authors": ["Carlos Andr√©s Ram√≠rez Cata√±o", "Makoto Itoh"], "title": "Breaking New Ground in Software Defect Prediction: Introducing Practical and Actionable Metrics with Superior Predictive Power for Enhanced Decision-Making", "comment": "16 pages, 2 figures, 2 formulas, 12 tables", "summary": "Software defect prediction using code metrics has been extensively researched\nover the past five decades. However, prediction harnessing non-software metrics\nis under-researched. Considering that the root cause of software defects is\noften attributed to human error, human factors theory might offer key\nforecasting metrics for actionable insights. This paper explores automated\nsoftware defect prediction at the method level based on the developers' coding\nhabits. First, we propose a framework for deciding the metrics to conduct\npredictions. Next, we compare the performance of our metrics to that of the\ncode and commit history metrics shown by research to achieve the highest\nperformance to date. Finally, we analyze the prediction importance of each\nmetric. As a result of our analyses of twenty-one critical infrastructure\nlarge-scale open-source software projects, we have presented: (1) a human\nerror-based framework with metrics useful for defect prediction at method\nlevel; (2) models using our proposed metrics achieve better average prediction\nperformance than the state-of-the-art code metrics and history measures; (3)\nthe prediction importance of all metrics distributes differently with each of\nthe novel metrics having better average importance than code and history\nmetrics; (4) the novel metrics dramatically enhance the explainability,\npracticality, and actionability of software defect prediction models,\nsignificantly advancing the field. We present a systematic approach to\nforecasting defect-prone software methods via a human error framework. This\nwork empowers practitioners to act on predictions, empirically demonstrating\nhow developer coding habits contribute to defects in software systems."}
{"id": "2508.04155", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.04155", "abs": "https://arxiv.org/abs/2508.04155", "authors": ["Jiajun Gu", "Yuhang Yao", "Shuaiqi Wang", "Carlee Joe-Wong"], "title": "Evaluating Selective Encryption Against Gradient Inversion Attacks", "comment": null, "summary": "Gradient inversion attacks pose significant privacy threats to distributed\ntraining frameworks such as federated learning, enabling malicious parties to\nreconstruct sensitive local training data from gradient communications between\nclients and an aggregation server during the aggregation process. While\ntraditional encryption-based defenses, such as homomorphic encryption, offer\nstrong privacy guarantees without compromising model utility, they often incur\nprohibitive computational overheads. To mitigate this, selective encryption has\nemerged as a promising approach, encrypting only a subset of gradient data\nbased on the data's significance under a certain metric. However, there have\nbeen few systematic studies on how to specify this metric in practice. This\npaper systematically evaluates selective encryption methods with different\nsignificance metrics against state-of-the-art attacks. Our findings demonstrate\nthe feasibility of selective encryption in reducing computational overhead\nwhile maintaining resilience against attacks. We propose a distance-based\nsignificance analysis framework that provides theoretical foundations for\nselecting critical gradient elements for encryption. Through extensive\nexperiments on different model architectures (LeNet, CNN, BERT, GPT-2) and\nattack types, we identify gradient magnitude as a generally effective metric\nfor protection against optimization-based gradient inversions. However, we also\nobserve that no single selective encryption strategy is universally optimal\nacross all attack scenarios, and we provide guidelines for choosing appropriate\nstrategies for different model architectures and privacy requirements."}
{"id": "2508.04448", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04448", "abs": "https://arxiv.org/abs/2508.04448", "authors": ["Damian Gnieciak", "Tomasz Szandala"], "title": "Large Language Models Versus Static Code Analysis Tools: A Systematic Benchmark for Vulnerability Detection", "comment": null, "summary": "Modern software relies on a multitude of automated testing and quality\nassurance tools to prevent errors, bugs and potential vulnerabilities. This\nstudy sets out to provide a head-to-head, quantitative and qualitative\nevaluation of six automated approaches: three industry-standard rule-based\nstatic code-analysis tools (SonarQube, CodeQL and Snyk Code) and three\nstate-of-the-art large language models hosted on the GitHub Models platform\n(GPT-4.1, Mistral Large and DeepSeek V3). Using a curated suite of ten\nreal-world C# projects that embed 63 vulnerabilities across common categories\nsuch as SQL injection, hard-coded secrets and outdated dependencies, we measure\nclassical detection accuracy (precision, recall, F-score), analysis latency,\nand the developer effort required to vet true positives. The language-based\nscanners achieve higher mean F-1 scores,0.797, 0.753 and 0.750, than their\nstatic counterparts, which score 0.260, 0.386 and 0.546, respectively. LLMs'\nadvantage originates from superior recall, confirming an ability to reason\nacross broader code contexts. However, this benefit comes with substantial\ntrade-offs: DeepSeek V3 exhibits the highest false-positive ratio, all language\nmodels mislocate issues at line-or-column granularity due to tokenisation\nartefacts. Overall, language models successfully rival traditional static\nanalysers in finding real vulnerabilities. Still, their noisier output and\nimprecise localisation limit their standalone use in safety-critical audits. We\ntherefore recommend a hybrid pipeline: employ language models early in\ndevelopment for broad, context-aware triage, while reserving deterministic\nrule-based scanners for high-assurance verification. The open benchmark and\nJSON-based result harness released with this paper lay a foundation for\nreproducible, practitioner-centric research into next-generation automated code\nsecurity."}
{"id": "2508.04178", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2508.04178", "abs": "https://arxiv.org/abs/2508.04178", "authors": ["Md Sajidul Islam Sajid", "Shihab Ahmed", "Ryan Sosnoski"], "title": "Secure Development of a Hooking-Based Deception Framework Against Keylogging Techniques", "comment": "Accepted at IEEE Secure Development Conference (SecDev) 2025", "summary": "Keyloggers remain a serious threat in modern cybersecurity, silently\ncapturing user keystrokes to steal credentials and sensitive information.\nTraditional defenses focus mainly on detection and removal, which can halt\nmalicious activity but do little to engage or mislead adversaries. In this\npaper, we present a deception framework that leverages API hooking to intercept\ninput-related API calls invoked by keyloggers at runtime and inject realistic\ndecoy keystrokes. A core challenge, however, lies in the increasing adoption of\nanti-hooking techniques by advanced keyloggers. Anti-hooking strategies allow\nmalware to bypass or detect instrumentation. To counter this, we introduce a\nhardened hooking layer that detects tampering and rapidly reinstates disrupted\nhooks, ensuring continuity of deception. We evaluate our framework against a\ncustom-built \"super keylogger\" incorporating multiple evasion strategies, as\nwell as 50 real-world malware samples spanning ten prominent keylogger\nfamilies. Experimental results demonstrate that our system successfully resists\nsophisticated bypass attempts, maintains operational stealth, and reliably\ndeceives attackers by feeding them decoys. The system operates with negligible\nperformance overhead and no observable impact on user experience. Our findings\nshow that resilient, runtime deception can play a practical and robust role in\nconfronting advanced threats."}
{"id": "2508.04479", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04479", "abs": "https://arxiv.org/abs/2508.04479", "authors": ["Hashini Gunatilake", "John Grundy", "Rashina Hoda", "Ingo Mueller"], "title": "Manifestations of Empathy in Software Engineering: How, Why, and When It Matters", "comment": null, "summary": "Empathy plays a crucial role in software engineering (SE), influencing\ncollaboration, communication, and decision-making. While prior research has\nhighlighted the importance of empathy in SE, there is limited understanding of\nhow empathy manifests in SE practice, what motivates SE practitioners to\ndemonstrate empathy, and the factors that influence empathy in SE work. Our\nstudy explores these aspects through 22 interviews and a large scale survey\nwith 116 software practitioners. Our findings provide insights into the\nexpression of empathy in SE, the drivers behind empathetic practices, SE\nactivities where empathy is perceived as useful or not, and the other factors\nthat influence empathy. In addition, we offer practical implications for SE\npractitioners and researchers, offering a deeper understanding of how to\neffectively integrate empathy into SE processes."}
{"id": "2508.04189", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2508.04189", "abs": "https://arxiv.org/abs/2508.04189", "authors": ["Kunlan Xiang", "Haomiao Yang", "Meng Hao", "Haoxin Wang", "Shaofeng Li", "Wenbo Jiang"], "title": "BadTime: An Effective Backdoor Attack on Multivariate Long-Term Time Series Forecasting", "comment": null, "summary": "Multivariate Long-Term Time Series Forecasting (MLTSF) models are\nincreasingly deployed in critical domains such as climate, finance, and\ntransportation. Although a variety of powerful MLTSF models have been proposed\nto improve predictive performance, the robustness of MLTSF models against\nmalicious backdoor attacks remains entirely unexplored, which is crucial to\nensuring their reliable and trustworthy deployment. To address this gap, we\nconduct an in-depth study on backdoor attacks against MLTSF models and propose\nthe first effective attack method named BadTime. BadTime executes a backdoor\nattack by poisoning training data and customizing the backdoor training\nprocess. During data poisoning, BadTime proposes a contrast-guided strategy to\nselect the most suitable training samples for poisoning, then employs a graph\nattention network to identify influential variables for trigger injection.\nSubsequently, BadTime further localizes optimal positions for trigger injection\nbased on lag analysis and proposes a puzzle-like trigger structure that\ndistributes the trigger across multiple poisoned variables to jointly steer the\nprediction of the target variable. During backdoor training, BadTime\nalternately optimizes the model and triggers via proposed tailored optimization\nobjectives. Extensive experiments show that BadTime significantly outperforms\nstate-of-the-art (SOTA) backdoor attacks on time series forecasting by reducing\nMAE by over 50% on target variables and boosting stealthiness by more than 3\ntimes."}
{"id": "2508.03936", "categories": ["cs.CR", "cs.CL", "cs.LG", "cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03936", "abs": "https://arxiv.org/abs/2508.03936", "authors": ["Xiangzhe Xu", "Guangyu Shen", "Zian Su", "Siyuan Cheng", "Hanxi Guo", "Lu Yan", "Xuan Chen", "Jiasheng Jiang", "Xiaolong Jin", "Chengpeng Wang", "Zhuo Zhang", "Xiangyu Zhang"], "title": "ASTRA: Autonomous Spatial-Temporal Red-teaming for AI Software Assistants", "comment": "The first two authors (Xiangzhe Xu and Guangyu Shen) contributed\n  equally to this work", "summary": "AI coding assistants like GitHub Copilot are rapidly transforming software\ndevelopment, but their safety remains deeply uncertain-especially in\nhigh-stakes domains like cybersecurity. Current red-teaming tools often rely on\nfixed benchmarks or unrealistic prompts, missing many real-world\nvulnerabilities. We present ASTRA, an automated agent system designed to\nsystematically uncover safety flaws in AI-driven code generation and security\nguidance systems. ASTRA works in three stages: (1) it builds structured\ndomain-specific knowledge graphs that model complex software tasks and known\nweaknesses; (2) it performs online vulnerability exploration of each target\nmodel by adaptively probing both its input space, i.e., the spatial\nexploration, and its reasoning processes, i.e., the temporal exploration,\nguided by the knowledge graphs; and (3) it generates high-quality\nviolation-inducing cases to improve model alignment. Unlike prior methods,\nASTRA focuses on realistic inputs-requests that developers might actually\nask-and uses both offline abstraction guided domain modeling and online domain\nknowledge graph adaptation to surface corner-case vulnerabilities. Across two\nmajor evaluation domains, ASTRA finds 11-66% more issues than existing\ntechniques and produces test cases that lead to 17% more effective alignment\ntraining, showing its practical value for building safer AI systems."}
{"id": "2508.04208", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2508.04208", "abs": "https://arxiv.org/abs/2508.04208", "authors": ["Saifullah Saifullah", "Stefan Agne", "Andreas Dengel", "Sheraz Ahmed"], "title": "DP-DocLDM: Differentially Private Document Image Generation using Latent Diffusion Models", "comment": "Accepted in ICDAR 2025", "summary": "As deep learning-based, data-driven information extraction systems become\nincreasingly integrated into modern document processing workflows, one primary\nconcern is the risk of malicious leakage of sensitive private data from these\nsystems. While some recent works have explored Differential Privacy (DP) to\nmitigate these privacy risks, DP-based training is known to cause significant\nperformance degradation and impose several limitations on standard training\nprocedures, making its direct application to downstream tasks both difficult\nand costly. In this work, we aim to address the above challenges within the\ncontext of document image classification by substituting real private data with\na synthetic counterpart. In particular, we propose to use conditional latent\ndiffusion models (LDMs) in combination with differential privacy (DP) to\ngenerate class-specific synthetic document images under strict privacy\nconstraints, which can then be utilized to train a downstream classifier\nfollowing standard training procedures. We investigate our approach under\nvarious pretraining setups, including unconditional, class-conditional, and\nlayout-conditional pretraining, in combination with multiple private training\nstrategies such as class-conditional and per-label private fine-tuning with\nDPDM and DP-Promise algorithms. Additionally, we evaluate it on two well-known\ndocument benchmark datasets, RVL-CDIP and Tobacco3482, and show that it can\ngenerate useful and realistic document samples across various document types\nand privacy levels ($\\varepsilon \\in \\{1, 5, 10\\}$). Lastly, we show that our\napproach achieves substantial performance improvements in downstream\nevaluations on small-scale datasets, compared to the direct application of\nDP-Adam."}
{"id": "2508.04285", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2508.04285", "abs": "https://arxiv.org/abs/2508.04285", "authors": ["Takumi Suimon", "Yuki Koizumi", "Junji Takemasa", "Toru Hasegawa"], "title": "Per-element Secure Aggregation against Data Reconstruction Attacks in Federated Learning", "comment": "10 pages, 5 figures", "summary": "Federated learning (FL) enables collaborative model training without sharing\nraw data, but individual model updates may still leak sensitive information.\nSecure aggregation (SecAgg) mitigates this risk by allowing the server to\naccess only the sum of client updates, thereby concealing individual\ncontributions. However, a significant vulnerability has recently attracted\nincreasing attention: when model updates are sparse vectors, a non-zero value\ncontributed by a single client at a given index can be directly revealed in the\naggregate, enabling precise data reconstruction attacks. In this paper, we\npropose a novel enhancement to SecAgg that reveals aggregated values only at\nindices with at least $t$ non-zero contributions. Our mechanism introduces a\nper-element masking strategy to prevent the exposure of under-contributed\nelements, while maintaining modularity and compatibility with many existing\nSecAgg implementations by relying solely on cryptographic primitives already\nemployed in a typical setup. We integrate this mechanism into Flamingo, a\nlow-round SecAgg protocol, to provide a robust defense against such attacks.\nOur analysis and experimental results indicate that the additional\ncomputational and communication overhead introduced by our mechanism remains\nwithin an acceptable range, supporting the practicality of our approach."}
{"id": "2508.04561", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.04561", "abs": "https://arxiv.org/abs/2508.04561", "authors": ["Muhammad Azmi Umer", "Chuadhry Mujeeb Ahmed", "Aditya Mathur", "Muhammad Taha Jilani"], "title": "Attack Pattern Mining to Discover Hidden Threats to Industrial Control Systems", "comment": null, "summary": "This work focuses on validation of attack pattern mining in the context of\nIndustrial Control System (ICS) security. A comprehensive security assessment\nof an ICS requires generating a large and variety of attack patterns. For this\npurpose we have proposed a data driven technique to generate attack patterns\nfor an ICS. The proposed technique has been used to generate over 100,000\nattack patterns from data gathered from an operational water treatment plant.\nIn this work we present a detailed case study to validate the attack patterns."}
{"id": "2508.04583", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2508.04583", "abs": "https://arxiv.org/abs/2508.04583", "authors": ["Marc Damie", "Mihai Pop", "Merijn Posthuma"], "title": "Measuring the Carbon Footprint of Cryptographic Privacy-Enhancing Technologies", "comment": null, "summary": "Privacy-enhancing technologies (PETs) have attracted significant attention in\nresponse to privacy regulations, driving the development of applications that\nprioritize user data protection. At the same time, the information and\ncommunication technology (ICT) sector faces growing pressure to reduce its\nenvironmental footprint, particularly its carbon emissions. While numerous\nstudies have assessed the energy footprint of various ICT applications, the\nenvironmental footprint of cryptographic PETs remains largely unexplored.\n  Our work addresses this gap by proposing a standardized methodology for\nevaluating the carbon footprint of PETs. To demonstrate this methodology, we\nfocus on PETs supporting client-server applications as they are the simplest to\ndeploy. In particular, we measure the energy consumption and carbon footprint\nincrease induced by five cryptographic PETs (compared to their non-private\nequivalent): HTTPS web browsing, encrypted machine learning (ML) inference,\nencrypted ML training, encrypted databases, and encrypted emails. Our findings\nreveal significant variability in carbon footprint increases, ranging from a\ntwofold increase in HTTPS web browsing to a 100,000-fold increase in encrypted\nML.\n  Our study provides essential data to help decision-makers assess\nprivacy-carbon trade-offs in such applications. Finally, we outline key\nresearch directions for developing PETs that balance strong privacy protection\nwith environmental sustainability."}
{"id": "2508.04641", "categories": ["cs.CR", "C.2.4"], "pdf": "https://arxiv.org/pdf/2508.04641", "abs": "https://arxiv.org/abs/2508.04641", "authors": ["Kirti Singh", "Vinay J. Ribeiro", "Susmita Mandal"], "title": "4-Swap: Achieving Grief-Free and Bribery-Safe Atomic Swaps Using Four Transactions", "comment": "Accepted to AFT 2025. To appear in the LIPIcs proceedings", "summary": "Cross-chain asset exchange is crucial for blockchain interoperability.\nExisting solutions rely on trusted third parties and risk asset loss, or use\ndecentralized alternatives like atomic swaps, which suffer from grief attacks.\nGriefing occurs when a party prematurely exits, locking the counterparty's\nassets until a timelock expires. Hedged Atomic Swaps mitigate griefing by\nintroducing a penalty premium; however, they increase the number of\ntransactions from four (as in Tier Nolan's swap) to six, which in turn\nintroduces new griefing risks. Grief-Free (GF) Swap reduces this to five\ntransactions by consolidating assets and premiums on a single chain. However,\nno existing protocol achieves grief-free asset exchange in just four\ntransactions.\n  This paper presents 4-Swap, the first cross-chain atomic swap protocol that\nis both grief-free and bribery-safe, while completing asset exchange in just\nfour transactions. By combining the griefing premium and principal into a\nsingle transaction per chain, 4-Swap reduces on-chain transactions, leading to\nfaster execution compared to previous grief-free solutions. It is fully\ncompatible with Bitcoin and operates without the need for any new opcodes. A\ngame-theoretic analysis shows that rational participants have no incentive to\ndeviate from the protocol, ensuring robust compliance and security."}
{"id": "2508.03856", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2508.03856", "abs": "https://arxiv.org/abs/2508.03856", "authors": ["Richard Hegewald", "Rebecca Beyer"], "title": "Evaluating Software Supply Chain Security in Research Software", "comment": "Accepted at conference GI SKILL 2025", "summary": "The security of research software is essential for ensuring the integrity and\nreproducibility of scientific results. However, research software security is\nstill largely unexplored. Due to its dependence on open source components and\ndistributed development practices, research software is particularly vulnerable\nto supply chain attacks. This study analyses 3,248 high-quality, largely\npeer-reviewed research software repositories using the OpenSSF Scorecard. We\nfind a generally weak security posture with an average score of 3.5/10.\nImportant practices, such as signed releases and branch protection, are rarely\nimplemented. Finally, we present actionable, low-effort recommendations that\ncan help research teams improve software security and mitigate potential\nthreats to scientific integrity."}
